package actions

import (
	"fmt"
	"time"

	"github.com/gobuffalo/uuid"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/pop/nulls"
	"github.com/nicomo/kumano/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Text)
// DB Table: Plural (texts)
// Resource: Plural (Texts)
// Path: Plural (/texts)
// View Template Folder: Plural (/templates/texts/)

// TextsResource is the resource for the Text model
type TextsResource struct {
	buffalo.Resource
}

// List gets all Texts. This function is mapped to the path
// GET /texts
func (v TextsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	texts := &models.Texts{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Where("draft = ?", false)

	// Retrieve all Texts from the DB
	if err := q.Eager().All(texts); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, texts))
}

// ListDrafts gets all Texts with draft status for a given user
// mapped to /texts/drafts
func (v TextsResource) ListDrafts(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	texts := &models.Texts{}
	uID := c.Session().Get("current_user_id").(uuid.UUID)
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Where("draft = ? AND author_id= ?", true, uID).Order("created_at desc")

	// Retrieve all Texts from the DB
	if err := q.Eager().All(texts); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	// FIXME: should simply be return c.Render(200, r.Auto(c, texts))
	// which is exactly what List() uses
	// but here it redirects to texts/show.html rather than index
	// I don't really understand how Auto() interprets the model I passed Texts
	c.Set("texts", texts)
	return c.Render(200, r.HTML("texts/index.html"))

}

// ListUserTexts gets all published Texts for a given user
// mapped to /texts/{user_id}
func (v TextsResource) ListUserTexts(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	texts := &models.Texts{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params()).Where("draft = ? AND author_id= ?", false, c.Param("user_id")).Order("created_at desc")

	// Retrieve all Texts from the DB
	if err := q.Eager().All(texts); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	// FIXME: should simply be return c.Render(200, r.Auto(c, texts))
	// which is exactly what List() uses
	// but here it redirects to texts/show.html rather than index
	// I don't really understand how Auto() interprets the model I passed Texts
	c.Set("texts", texts)
	return c.Render(200, r.HTML("texts/index.html"))
}

// Show gets the data for one Text. This function is mapped to
// the path GET /texts/{text_id}
func (v TextsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Text
	text := &models.Text{}

	// To find the Text the parameter text_id is used.
	if err := tx.Eager().Find(text, c.Param("text_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, text))
}

// New renders the form for creating a new Text.
// This function is mapped to the path GET /texts/new
func (v TextsResource) New(c buffalo.Context) error {
	user := c.Value("current_user").(*models.User)
	ok := user.CanPost()
	if ok {
		// can edit post regardless
		c.Set("user_can_post", true)
	} else {
		c.Set("user_can_post", false)
		diff := time.Since(user.LastPostedAt)
		c.Flash().Add("info", fmt.Sprintf("Slow down (last post was %s ago). You can still work on drafts though.", diff.Truncate(time.Second).String()))
	}
	return c.Render(200, r.Auto(c, &models.Text{}))
}

// Create adds a Text to the DB. This function is mapped to the
// path POST /texts
func (v TextsResource) Create(c buffalo.Context) error {
	// Allocate an empty Text & get user
	text := &models.Text{}
	user := c.Value("current_user").(*models.User)

	// Bind text to the html form elements
	if err := c.Bind(text); err != nil {
		return errors.WithStack(err)
	}
	text.AuthorID = user.ID
	if !text.Draft {
		text.PublishedAt = nulls.NewTime(time.Now())
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(text)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, text))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "text.created.success"))

	// Add points + date last posted to user
	user.Score += models.PointsPosts
	user.LastPostedAt = time.Now()
	if err := tx.Update(user); err != nil {
		// TODO: log err server side
		c.Flash().Add("danger", T.Translate(c, "user.postcredit.failure"))
	}

	// and redirect to the texts index page
	return c.Render(201, r.Auto(c, text))
}

// Edit renders a edit form for a Text. This function is
// mapped to the path GET /texts/{text_id}/edit
func (v TextsResource) Edit(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Text
	text := &models.Text{}

	if err := tx.Find(text, c.Param("text_id")); err != nil {
		return c.Error(404, err)
	}
	user := c.Value("current_user").(*models.User)
	ok = user.CanPost()
	if !text.Draft || ok {
		// can edit post regardless
		c.Set("user_can_post", true)
	} else {
		c.Set("user_can_post", false)
		diff := time.Since(user.LastPostedAt)
		c.Flash().Add("info", fmt.Sprintf("Slow down (last post was %s ago). You can still work on drafts though.", diff.Truncate(time.Second).String()))
	}

	return c.Render(200, r.Auto(c, text))
}

// Update changes a Text in the DB. This function is mapped to
// the path PUT /texts/{text_id}
func (v TextsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Text
	text := &models.Text{}

	if err := tx.Find(text, c.Param("text_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Text to the html form elements
	if err := c.Bind(text); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(text)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, text))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Text was updated successfully")

	// and redirect to the texts index page
	return c.Render(200, r.Auto(c, text))
}

// Destroy deletes a Text from the DB. This function is mapped
// to the path DELETE /texts/{text_id}
func (v TextsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Text
	text := &models.Text{}

	// To find the Text the parameter text_id is used.
	if err := tx.Find(text, c.Param("text_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(text); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Text was destroyed successfully")

	// Redirect to the texts index page
	return c.Render(200, r.Auto(c, text))
}

// StarHandler when a user stars a text
func StarHandler(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Text
	text := &models.Text{}

	if err := tx.Find(text, c.Param("text_id")); err != nil {
		return c.Error(404, err)
	}

	star := &models.Star{
		ID:        uuid.Must(uuid.NewV4()),
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
		UserID:    c.Session().Get("current_user_id").(uuid.UUID),
		TextID:    text.ID,
	}

	// TODO: userid+textid should be unique

	verrs, err := tx.ValidateAndCreate(star)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		fmt.Printf("\n#### verrs ####\n%v\n#### star ####\n", verrs)
		// Render again.
		return c.Render(422, r.Auto(c, text))
	}

	return c.Redirect(200, "/")
}
